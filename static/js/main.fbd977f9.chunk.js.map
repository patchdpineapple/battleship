{"version":3,"sources":["components/Start.js","components/ShipPlacement.js","components/Game.js","components/Result.js","data/player.js","data/ship.js","data/gameboard.js","game-controller.js","sounds/splash2.flac","sounds/cannonshot 8bit.wav","sounds/explode 8bit.wav","sounds/win.wav","sounds/lose.wav","sounds/start game.ogg","components/App.js","index.js"],"names":["Start","onToggleStart","className","onClick","drop_status","DragShip","props","useState","isHorizontal","setIsHorizontal","toggleAxis","show","id","type","length","draggable","onDragStart","e","dataTransfer","setData","effectAllowed","onDragEnd","stopPropagation","dropEffect","unshow","map","x","i","ShipSelection","showPatrol","handleUnshowPatrol","showSubmarine","handleUnshowSubmarine","showDestroyer","handleUnshowDestroyer","showBattleship","handleUnshowBattleship","showCarrier","handleUnshowCarrier","DropPanel","index","player","ship","coords","handlePlaceShip","getCoords","axis","baseIndex","shipIndex","increment","shipIndexesArray","shipCoords","invalid","occupied","invalidBaseIndexes","invalidIndexesArray","isOccupied","board","boardCoordinates","push","tempBaseIndexes","j","findIndex","invalidIndex","pos","isHit","onDrop","preventDefault","target","classList","remove","ship_type","getData","ship_length","ship_axis","ship_baseIndex","coord","y","onDragOver","add","onDragLeave","DropBoard","ShipPlacement","onResetShipPlacement","onDoneShipPlacement","setShowPatrol","setShowSubmarine","setShowDestroyer","setShowBattleship","setShowCarrier","ships","disabled","Panel","turn","handlePlayerAttack","status","onPlayerAttack","Restart","onToggleRestart","handleRestartGame","Game","CPU","handleCPUAttack","useEffect","style","fontSize","Result","winner","playerFactory","prevAttackCoords","prevAttackIndex","firstHitCoord","attacksRecord","randomAttack","randomCoords","Math","floor","random","checkAttacksRecord","targetAcquired","targetShip","targetAxis","checkRight","checkUp","playerAttack","targetX","targetY","cpu","result","receiveAttack","aiAttack","attackResult","resetAttacksRecord","attacksRecordLength","pop","aiAttackImproved","attackHorizontal","attackX","attackVertical","attackY","attackAdjacentCoord","attackCoords","findBoardIndex","attackAdjacent","adjacentAxis","randPick","adjacentIndex","direction","shipFactory","hit","isSunk","hitChecker","gameboardFactory","setBoardCoordinates","isAttacked","placeShip","newShip","tempCoord","updateToSunk","shipCoord","sunkCoord","boardCoord","recordResult","forEach","reportShips","sunkShips","resetBoard","boardLength","shipsLength","randomizeShip","randomizeCoords","minIndex","maxIndex","baseRandIndex","randIndexArray","shipsOccupied","adjacentOccupied","getRndInteger","tempVerticalIndex","checkAdjacent","min","max","randCoords","generateRandomShips","game_controller","Player","start","resetGame","randomizeShips","App","setTurn","setPlayer","setCPU","showStart","setShowStart","showShipPlacement","setShowShipPlacement","showGame","setShowGame","showRestart","setShowRestart","showResult","setShowResult","setWinner","toggleRestart","toggleTurn","toggleResult","playSound","audio","document","createElement","src","miss","volume","sunk","win_sound","lose_sound","currentTime","play","tempPlayer","parseInt","tempCPU","setTimeout","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fbd977f9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Start.css\";\n\nfunction Start({ onToggleStart }) {\n  return (\n    <div className=\"Start\">\n      <strong>BATTLESHIP</strong>\n      <p>by Patchdpineapple</p>\n      <button className=\"btn\" onClick={onToggleStart}>\n        START GAME\n      </button>\n    </div>\n  );\n}\n\nexport default Start;\n","import React, { useState } from \"react\";\nimport \"./ShipPlacement.css\";\n\nlet drop_status = \"valid\";\n\nfunction DragShip(props) {\n  const [isHorizontal, setIsHorizontal] = useState(true);\n\n  const toggleAxis = () => {\n    setIsHorizontal(!isHorizontal);\n  };\n\n  const dragStart = (e) => {\n    e.dataTransfer.setData(\"ship_type\", props.type);\n    e.dataTransfer.setData(\"ship_length\", props.length.length);\n    e.dataTransfer.setData(\n      \"ship_axis\",\n      isHorizontal ? \"horizontal\" : \"vertical\"\n    );\n    e.dataTransfer.effectAllowed = \"move\";\n  };\n\n  const dragEnd = (e) => {\n    e.stopPropagation();\n\n    if (drop_status !== \"invalid\") {\n      if (e.dataTransfer.dropEffect === \"move\") {\n        if (!isHorizontal) toggleAxis(); //reset axis\n        props.unshow();\n      }\n    }\n  };\n\n  return (\n    <>\n      {props.show ? (\n        <div\n          id={props.id}\n          type={props.type}\n          length={props.length.length}\n          className={`DragShip ${isHorizontal ? \"horizontal\" : \"vertical\"}`}\n          onClick={toggleAxis}\n          draggable={true}\n          onDragStart={dragStart}\n          onDragEnd={dragEnd}\n        >\n          {props.length.map((x, i) => (\n            <div key={i} className=\"selectShip\"></div>\n          ))}\n        </div>\n      ) : (\n        <div />\n      )}\n    </>\n  );\n}\n\nfunction ShipSelection(props) {\n  return (\n    <div className=\"ShipSelection\">\n      <DragShip\n        id={1}\n        type=\"Patrol\"\n        length={[1, 2]}\n        show={props.showPatrol}\n        unshow={props.handleUnshowPatrol}\n      />\n      <DragShip\n        id={2}\n        type=\"Submarine\"\n        length={[1, 2, 3]}\n        show={props.showSubmarine}\n        unshow={props.handleUnshowSubmarine}\n      />\n      <DragShip\n        id={3}\n        type=\"Destroyer\"\n        length={[1, 2, 3]}\n        show={props.showDestroyer}\n        unshow={props.handleUnshowDestroyer}\n      />\n      <DragShip\n        id={4}\n        type=\"Battleship\"\n        length={[1, 2, 3, 4]}\n        show={props.showBattleship}\n        unshow={props.handleUnshowBattleship}\n      />\n      <DragShip\n        id={5}\n        type=\"Carrier\"\n        length={[1, 2, 3, 4, 5]}\n        show={props.showCarrier}\n        unshow={props.handleUnshowCarrier}\n      />\n    </div>\n  );\n}\n\nfunction DropPanel({ index, player, ship, coords, handlePlaceShip }) {\n  const dragOver = (e) => {\n    //show hover over color\n    e.preventDefault();\n    e.target.classList.add(\"draggingOver\");\n  };\n\n  const dragLeave = (e) => {\n    //remove hovered over color\n    e.preventDefault();\n    e.target.classList.remove(\"draggingOver\");\n  };\n\n  const drop = (e) => {\n    e.preventDefault();\n    //remove hovered over color\n    e.target.classList.remove(\"draggingOver\");\n\n    //returns a new\n    let ship_type = e.dataTransfer.getData(\"ship_type\");\n    let ship_length = e.dataTransfer.getData(\"ship_length\");\n    let ship_axis = e.dataTransfer.getData(\"ship_axis\");\n    let ship_baseIndex = player.board.boardCoordinates.findIndex(\n      (coord) => coord.pos.x === coords.x && coord.pos.y === coords.y\n    );\n    let shipCoords = getCoords(ship_baseIndex, ship_length, ship_axis);\n\n    //for testing only\n    if (shipCoords) {\n      drop_status = \"valid\";\n      handlePlaceShip(ship_type, ship_length, shipCoords);\n    } else {\n      drop_status = \"invalid\";\n    }\n  };\n\n  const getCoords = (index, length, axis) => {\n    //returns a valid ship coordinates array or null if invalid dropped index\n    let shipIndex = index;\n    let increment = 0;\n    let shipIndexesArray = [];\n    let shipCoords = [];\n    let invalid = 0;\n    let occupied = 0;\n    let invalidBaseIndexes = []; //array of all invalid base indexes(0,1,2,...,9)/(0,10,20,...,90) depending on length and axis\n    let invalidIndexesArray = []; //array of all invalid indexes\n\n    //used to check if dropped shipIndex is invalid\n    const isInvalid = (baseIndex, invalidIndexes) => {\n      return invalidIndexes.findIndex(\n        (invalidIndex) => invalidIndex === baseIndex\n      ) > -1\n        ? true\n        : false;\n    };\n\n    //used to check if the current shipIndex is already occupied or undefined\n    const isOccupied = (baseIndex) => {\n      if (typeof player.board.boardCoordinates[baseIndex] === \"undefined\") {\n        return true;\n      }\n\n      return player.board.boardCoordinates[baseIndex].ship ? true : false;\n    };\n\n    //set increment and invalid indexes for checking if dropped index is valid\n    if (axis === \"horizontal\") {\n      increment = 1;\n\n      //fill array with invalid lowest indexes depending on length\n      for (let i = 11 - length; i < 10; i++) {\n        invalidBaseIndexes.push(i);\n      }\n\n      //assign all invalid indexes based on all invalid lowest indexes\n      let tempBaseIndexes;\n      for (let i = 0; i < invalidBaseIndexes.length; i++) {\n        tempBaseIndexes = invalidBaseIndexes[i];\n        for (let j = 0; j < 10; j++) {\n          invalidIndexesArray.push(tempBaseIndexes);\n          tempBaseIndexes += 10;\n        }\n      }\n    } else if (axis === \"vertical\") {\n      increment = 10;\n\n      for (let i = 110 - length * 10; i < 100; i += 10) {\n        invalidBaseIndexes.push(i);\n      }\n\n      let tempBaseIndexes;\n      for (let i = 0; i < invalidBaseIndexes.length; i++) {\n        tempBaseIndexes = invalidBaseIndexes[i];\n        for (let j = 0; j < 10; j++) {\n          invalidIndexesArray.push(tempBaseIndexes);\n          tempBaseIndexes += 1;\n        }\n      }\n    }\n\n    //check if dropped index is an invalid(not fit for length of ship) spot to drop\n    if (isInvalid(shipIndex, invalidIndexesArray)) invalid++;\n\n    //complete ship indexes\n    for (let i = 0; i < length; i++) {\n      shipIndexesArray.push(shipIndex);\n      if (isOccupied(shipIndex)) occupied++;\n      shipIndex += increment;\n    }\n\n    if (invalid > 0 || occupied > 0) return null;\n\n    //convert and store ship indexes as ship coordinates\n    for (let i = 0; i < shipIndexesArray.length; i++) {\n      shipCoords.push({\n        pos: player.board.boardCoordinates[shipIndexesArray[i]].pos,\n        isHit: false,\n      });\n    }\n\n    return shipCoords;\n  };\n\n  return (\n    <button\n      className={`DropPanel ${ship ? \"dropped\" : \"not_dropped\"}`}\n      onDrop={drop}\n      onDragOver={dragOver}\n      onDragLeave={dragLeave}\n    ></button>\n  );\n}\n\nfunction DropBoard({ player, handlePlaceShip }) {\n  return (\n    <div id=\"DropBoard\" className=\"DropBoard\">\n      {player.board.boardCoordinates.map((coord, i) => (\n        <DropPanel\n          key={i}\n          index={i}\n          player={player}\n          ship={coord.ship}\n          coords={coord.pos}\n          handlePlaceShip={handlePlaceShip}\n        />\n      ))}\n    </div>\n  );\n}\n\nfunction ShipPlacement({\n  player,\n  handlePlaceShip,\n  onResetShipPlacement,\n  onDoneShipPlacement,\n}) {\n  const [showPatrol, setShowPatrol] = useState(true);\n  const [showSubmarine, setShowSubmarine] = useState(true);\n  const [showDestroyer, setShowDestroyer] = useState(true);\n  const [showBattleship, setShowBattleship] = useState(true);\n  const [showCarrier, setShowCarrier] = useState(true);\n\n  const handleUnshowPatrol = () => {\n    setShowPatrol(false);\n  };\n\n  const handleUnshowSubmarine = () => {\n    setShowSubmarine(false);\n  };\n\n  const handleUnshowDestroyer = () => {\n    setShowDestroyer(false);\n  };\n\n  const handleUnshowBattleship = () => {\n    setShowBattleship(false);\n  };\n\n  const handleUnshowCarrier = () => {\n    setShowCarrier(false);\n  };\n\n  const handleResetShips = () => {\n    setShowPatrol(true);\n    setShowSubmarine(true);\n    setShowDestroyer(true);\n    setShowBattleship(true);\n    setShowCarrier(true);\n    onResetShipPlacement();\n  };\n\n  return (\n    <div className=\"ShipPlacement\">\n      <div className=\"ShipPlacement_container\">\n        <DropBoard player={player} handlePlaceShip={handlePlaceShip} />\n        <ShipSelection\n          showPatrol={showPatrol}\n          handleUnshowPatrol={handleUnshowPatrol}\n          showSubmarine={showSubmarine}\n          handleUnshowSubmarine={handleUnshowSubmarine}\n          showDestroyer={showDestroyer}\n          handleUnshowDestroyer={handleUnshowDestroyer}\n          showBattleship={showBattleship}\n          handleUnshowBattleship={handleUnshowBattleship}\n          showCarrier={showCarrier}\n          handleUnshowCarrier={handleUnshowCarrier}\n        />\n      </div>\n      <p>\n        Drag and Drop to place a ship on the board. Click to change ship axis.\n      </p>\n      <div>\n        <button className=\"btn reset\" onClick={handleResetShips}>\n          Reset\n        </button>\n        <button\n          className={`btn done ${\n            player.board.ships.length !== 5 ? \"btn_disabled\" : \"\"\n          }`}\n          onClick={onDoneShipPlacement}\n          disabled={player.board.ships.length === 5 ? false : true}\n        >\n          Done\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default ShipPlacement;\n","import React, { useEffect } from \"react\";\nimport \"./Game.css\";\n\nfunction Panel({\n  index,\n  turn,\n  type,\n  handlePlayerAttack,\n  coords,\n  ship,\n  status,\n}) {\n  const onPlayerAttack = () => {\n    handlePlayerAttack(coords.x, coords.y);\n  };\n\n  if (ship) {\n    return (\n      <>\n        {status === \"sunk\" ? (\n          <button className=\"Panel sunk\">\n            <i className=\"far fa-times-circle\"></i>\n          </button>\n        ) : null}\n        {status === \"hit\" ? (\n          <button\n            className={`Panel hit ${type === \"player\" ? \"ship\" : \"ship\"}`}\n          >\n            <i className=\"far fa-times-circle\"></i>\n          </button>\n        ) : null}\n        {status === null ? (\n          <button\n            className={`Panel ${type === \"player\" ? \"ship\" : \"\"}`}\n            onClick={() => {\n              if (type === \"cpu\" && turn === \"player\") {\n                return onPlayerAttack();\n              } else {\n                return ;\n              }\n            }}\n          />\n        ) : null}\n      </>\n    );\n  } else {\n    return (\n      <>\n        {status === \"miss\" ? (\n          <button className=\"Panel miss\">\n            <i className=\"fas fa-circle fa-xs\"></i>\n          </button>\n        ) : null}\n        {status === null ? (\n          <button\n            className=\"Panel\"\n            onClick={() => {\n              if (type === \"cpu\" && turn === \"player\") {\n                return onPlayerAttack();\n              } else {\n                return ;\n              }\n            }}\n          />\n        ) : null}\n      </>\n    );\n  }\n}\n\nfunction Restart({ onToggleRestart, handleRestartGame }) {\n  return (\n    <div className=\"Restart\" onClick={onToggleRestart}>\n      <div className=\"Restart_container\">\n        <h2>Restart the game?</h2>\n        <button className=\"btn btn_restart\" onClick={handleRestartGame}>\n          Restart\n        </button>\n        <button className=\"btn btn_cancel\" onClick={onToggleRestart}>\n          Cancel\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction Game({\n  player,\n  CPU,\n  turn,\n  onToggleRestart,\n  handlePlayerAttack,\n  handleCPUAttack,\n}) {\n  useEffect(\n    //checks if it is cpu's turn and attacks player's board\n    () => {\n      if (turn === \"cpu\") {\n        handleCPUAttack();\n      }\n    },\n    [handleCPUAttack, turn]\n  );\n\n  return (\n    <div className=\"Game\">\n      <div className=\"logo\">\n        <button className=\"btn_logo\" onClick={onToggleRestart}>\n          BATTLESHIP\n        </button>\n      </div>\n      <div className=\"board_container\">\n        <div className=\"player_container\">\n          <p style={{ fontSize: \"30px\" }}>Player</p>\n          <div className=\"board player_board\">\n            {player.board.boardCoordinates.map((coord, i) => (\n              <Panel\n                key={i}\n                index={i}\n                type=\"player\"\n                coords={coord.pos}\n                ship={coord.ship}\n                status={coord.status}\n              />\n            ))}\n          </div>\n        </div>\n        <div className=\"status_container\">\n          <div className=\"status_box\">\n            {turn === \"player\" ? \"Player turn\" : \"CPU is attacking\"}\n          </div>\n        </div>\n        <div className=\"cpu_container\">\n          <p style={{ fontSize: \"30px\" }}>CPU</p>\n          <div className=\"board cpu_board\">\n            {CPU.board.boardCoordinates.map((coord, i) => (\n              <Panel\n                key={i}\n                index={i}\n                turn={turn}\n                type=\"cpu\"\n                handlePlayerAttack={handlePlayerAttack}\n                coords={coord.pos}\n                ship={coord.ship}\n                status={coord.status}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\nexport { Restart };\n","import React from \"react\";\nimport \"./Result.css\";\n\nfunction Result({ winner, handleRestartGame }) {\n  return (\n    <div className=\"Result\">\n      <div className=\"Result_container\">\n        <strong>\n          {winner === \"player\" ? \"Good job! You win!\" : \"Game over. CPU wins.\"}\n        </strong>\n        <button className=\"btn btn_playAgain\" onClick={handleRestartGame}>\n          Play again\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Result;\n","const playerFactory = (board) => {\n  let attacksRecord = []; //ex. [{x: 1, y: 1},{x: 1, y: 2}]\n\n  const randomAttack = () => {\n    //return a random coordinate that is not attacked yet\n    //picks a coordinate to attack from a 10x10 board\n    let randomCoords = {\n      x: Math.floor(Math.random() * 10) + 1,\n      y: Math.floor(Math.random() * 10) + 1,\n    };\n    //if coordinates already exist on attacksRecord, pick new random coord\n    return checkAttacksRecord(randomCoords.x, randomCoords.y) > -1\n      ? randomAttack()\n      : randomCoords;\n  };\n\n  const playerAttack = (targetX, targetY, cpu) => {\n    let attackResult = cpu.board.receiveAttack(targetX, targetY);\n    return {\n      coords: { x: targetX, y: targetY },\n      result: attackResult,\n    };\n  };\n\n  const aiAttack = (player) => {\n    //attacks the opponent's board and records the attack coordinate\n    let randomCoords = randomAttack();\n    let attackResult = player.board.receiveAttack(\n      randomCoords.x,\n      randomCoords.y\n    );\n    attacksRecord.push(randomCoords);\n    return {\n      coords: { ...randomCoords },\n      result: attackResult,\n    };\n  };\n\n  //variables to be used by ai attacks\n  let prevAttackStatus = \"miss\"; //record previous attack if miss/hit/sunk\n  let prevAttackCoords;\n  let prevAttackIndex;\n  let firstHitIndex;\n  let firstHitCoord;\n  let targetAcquired = false;\n  let targetShip = \"\";\n  let targetAxis = null;\n  let checkRight = true;\n  let checkUp = true;\n\n  const aiAttackImproved = (player) => {\n    //attacks the opponent's board and records the attack coordinate\n    let attackResult; //records result of attack if miss/hit/sunk\n\n    const attackAdjacent = () => {\n      //randomly choose to attack left,right,up or down adjacent panels\n      let randomCoords;\n      let adjacentAxis;\n      let randChoices = [\"left\", \"right\", \"up\", \"down\"];\n      let randPick = randChoices[Math.floor(Math.random() * 4)];\n      switch (randPick) {\n        case \"left\":\n          adjacentAxis = \"horizontal\";\n          randomCoords = { x: firstHitCoord.x - 1, y: firstHitCoord.y };\n          break;\n        case \"right\":\n          adjacentAxis = \"horizontal\";\n          randomCoords = { x: firstHitCoord.x + 1, y: firstHitCoord.y };\n          break;\n        case \"up\":\n          adjacentAxis = \"vertical\";\n          randomCoords = { x: firstHitCoord.x, y: firstHitCoord.y - 1 };\n          break;\n        case \"down\":\n          adjacentAxis = \"vertical\";\n          randomCoords = { x: firstHitCoord.x, y: firstHitCoord.y + 1 };\n          break;\n        default:\n          break;\n      }\n\n      //check if coordinate exists\n      let adjacentIndex = player.board.findBoardIndex(\n        randomCoords.x,\n        randomCoords.y\n      );\n      if (adjacentIndex > -1) {\n        //check if coordinates already exist on attacksRecord\n        return checkAttacksRecord(randomCoords.x, randomCoords.y) > -1\n          ? attackAdjacent()\n          : {\n              axis: adjacentAxis,\n              direction: randPick,\n              index: adjacentIndex,\n              pos: randomCoords,\n            };\n      } else {\n        return attackAdjacent();\n      }\n    };\n\n    const attackHorizontal = () => {\n      //returns a legitimate attack coords to the right/left direction\n      let attackX;\n      if (checkRight) attackX = prevAttackCoords.x + 1;\n      else if (!checkRight) attackX = prevAttackCoords.x - 1;\n\n      //check if attack is legitimate\n      if (\n        attackX < 11 &&\n        attackX > 0 &&\n        checkAttacksRecord(attackX, prevAttackCoords.y) === -1\n      ) {\n        let returnCoord = {\n          x: attackX,\n          y: prevAttackCoords.y,\n        };\n        return returnCoord;\n      } else {\n        checkRight = !checkRight;\n        prevAttackCoords.x = firstHitCoord.x;\n        attackHorizontal();\n      }\n    };\n\n    const attackVertical = () => {\n      //returns a legitimate attack coords to the up/down direction\n      let attackY;\n      if (checkUp) attackY = prevAttackCoords.y - 1;\n      else if (!checkUp) attackY = prevAttackCoords.y + 1;\n\n      //check if attack is legitimate\n      if (\n        attackY < 11 &&\n        attackY > 0 &&\n        checkAttacksRecord(prevAttackCoords.x, attackY) === -1\n      ) {\n        let returnCoord = {\n          x: prevAttackCoords.x,\n          y: attackY,\n        };\n        return returnCoord;\n      } else {\n        checkUp = !checkUp;\n        prevAttackCoords.y = firstHitCoord.y;\n        attackVertical();\n      }\n    };\n\n    if (!targetAcquired) {\n      //if there are no current targeted ship attack randomly and record data if attack hits\n      let randomCoords = randomAttack();\n      attackResult = player.board.receiveAttack(randomCoords.x, randomCoords.y);\n      attacksRecord.push(randomCoords);\n      prevAttackStatus = attackResult;\n      prevAttackCoords = randomCoords;\n      prevAttackIndex = player.board.findBoardIndex(\n        randomCoords.x,\n        randomCoords.y\n      );\n\n      //check if random attack hits a target and record data()\n      if (attackResult === \"sunk\") {\n        targetAcquired = false;\n        targetShip = \"\";\n        targetAxis = null;\n      }\n      if (attackResult === \"hit\") {\n        //acquire target\n        targetAcquired = true;\n        //set target ship type\n        targetShip = player.board.boardCoordinates[prevAttackIndex].ship;\n        //record coord and index of first hit\n        firstHitCoord = randomCoords;\n        firstHitIndex = prevAttackIndex;\n      }\n    } else if (targetAcquired) {\n      //get random axis if there is no target ship axis yet\n      let attackAdjacentCoord; //ex. { axis: \"horizontal\", direction: \"left\", index: 0, pos: {x: 1, y: 1} }\n      if (!targetAxis) {\n        attackAdjacentCoord = attackAdjacent();\n        attackResult = player.board.receiveAttack(\n          attackAdjacentCoord.pos.x,\n          attackAdjacentCoord.pos.y\n        );\n\n        prevAttackCoords = attackAdjacentCoord.pos;\n        prevAttackIndex = attackAdjacentCoord.index;\n        prevAttackStatus = attackResult;\n        attacksRecord.push(attackAdjacentCoord.pos);\n\n        if (\n          attackResult === \"sunk\" &&\n          player.board.boardCoordinates[attackAdjacentCoord.index].ship ===\n            targetShip\n        ) {\n          targetAcquired = false;\n          targetShip = \"\";\n          targetAxis = null;\n        } else if (\n          attackResult === \"hit\" &&\n          player.board.boardCoordinates[attackAdjacentCoord.index].ship ===\n            targetShip\n        ) {\n          targetAxis = attackAdjacentCoord.axis;\n          switch (attackAdjacentCoord.direction) {\n            case \"left\":\n              checkRight = false;\n              break;\n            case \"right\":\n              checkRight = true;\n              break;\n            case \"up\":\n              checkUp = true;\n              break;\n            case \"down\":\n              checkUp = false;\n              break;\n            default:\n              break;\n          }\n        }\n      } else {\n        let attackCoords;\n        if (targetAxis === \"horizontal\") {\n          do {\n            attackCoords = attackHorizontal();\n          } while (typeof attackCoords === \"undefined\");\n        } else if (targetAxis === \"vertical\") {\n          do {\n            attackCoords = attackVertical();\n          } while (typeof attackCoords === \"undefined\");\n        }\n        attackResult = player.board.receiveAttack(\n          attackCoords.x,\n          attackCoords.y\n        );\n        //record result\n        prevAttackStatus = attackResult;\n        prevAttackCoords = attackCoords;\n        prevAttackIndex = player.board.findBoardIndex(\n          attackCoords.x,\n          attackCoords.y\n        );\n        attacksRecord.push(attackCoords);\n\n        if (attackResult === \"sunk\") {\n          targetAcquired = false;\n          targetShip = \"\";\n          targetAxis = null;\n        } else if (\n          (attackResult === \"hit\" &&\n            player.board.boardCoordinates[prevAttackIndex].ship !==\n              targetShip) ||\n          attackResult === \"miss\"\n        ) {\n          switch (targetAxis) {\n            case \"horizontal\":\n              checkRight = !checkRight;\n              prevAttackCoords.x = firstHitCoord.x;\n              break;\n            case \"vertical\":\n              checkUp = !checkUp;\n              prevAttackCoords.y = firstHitCoord.y;\n              break;\n            default:\n          }\n        }\n      }\n    }\n\n    return {\n      coords: { ...prevAttackCoords },\n      result: attackResult,\n    };\n  };\n\n  const resetAttacksRecord = () => {\n    let attacksRecordLength = attacksRecord.length;\n    for (let i = 0; i < attacksRecordLength; i++) {\n      attacksRecord.pop();\n    }\n  };\n\n  const checkAttacksRecord = (x, y) => {\n    //shortcut for finding if a coord is already in the attacksRecord\n    return attacksRecord.findIndex((coord) => coord.x === x && coord.y === y);\n  };\n\n  return {\n    board,\n    randomAttack,\n    playerAttack,\n    aiAttack,\n    resetAttacksRecord,\n    aiAttackImproved,\n  };\n};\nexport default playerFactory;\n","const shipFactory = (type, length, coords) => {\n  const hit = (targetX, targetY) => {\n    //this method finds the coordinates equal to the target and changes its hit status to true\n    let temp = coords.map((coord) => {\n      if (coord.pos.x === targetX && coord.pos.y === targetY) {\n        coord.isHit = true;\n      }\n      return coord;\n    });\n  };\n\n  const isSunk = () => {\n    //this method checks all coordinates and returns true if all coordinates were hit\n    let hitChecker = 0;\n    for (let i = 0; i < coords.length; i++) {\n      if (coords[i].isHit === true) ++hitChecker;\n    }\n    if (hitChecker === length) {\n      return true;\n    } else return false;\n  };\n\n  return {\n    type,\n    length,\n    coords,\n    hit,\n    isSunk,\n  };\n};\n\n/* sample ship = { \n  type: 'Patrol', \n  length: 2, \n  coords:  \n   [ { pos: { x: 1, y: 1 }, isHit: false }, \n     { pos: { x: 1, y: 2 }, isHit: false } ], \n  hit: [λ: hit], \n  isSunk: [λ: isSunk] } \n}\n*/\n\nexport default shipFactory;\n","import shipFactory from \"./ship\";\n\nconst gameboardFactory = () => {\n  /* ex. board coordinates = [\n    {pos: { x: 1, y: 1 }, ship: null, isAttacked: false, status: \"hit\"},\n    {pos: { x: 1, y: 2 }, ship: 'Patrol', isAttacked: false, status: \"hit\"}\n    {pos: { x: 1, y: 3 }, ship: 'Patrol', isAttacked: true, status: \"hit\"}\n    {pos: { x: 1, y: 4 }, ship: null, isAttacked: true, status: \"miss\"}\n  ]\n  */\n  let boardCoordinates = [];\n\n  let ships = []; /* ex.\n  [\n    { type: 'Patrol', length: 2, \n  coords:  \n   [ { pos: { x: 1, y: 1 },, isHit: false }, \n     { pos: { x: 1, y: 2 }, isHit: false } ], \n  hit: [λ: hit], \n  isSunk: [λ: isSunk] } \n}\n  ] \n  */\n\n  const setBoardCoordinates = () => {\n    //this method sets the gameboard coordinates and adds the ship coordinates to gameboard\n    if (boardCoordinates.length === 0) {\n      for (let i = 1; i <= 10; i++) {\n        for (let j = 1; j <= 10; j++) {\n          boardCoordinates.push({\n            pos: { x: j, y: i },\n            ship: null,\n            isAttacked: false,\n            status: null,\n          });\n        }\n      }\n    }\n  };\n\n  const placeShip = (type, length, coords) => {\n    //places a new ship with the specified type, length and coords onto the board\n    const newShip = shipFactory(type, length, coords);\n    ships.push(newShip);\n    newShip.coords.map((coord) => {\n      let x = coord.pos.x;\n      let y = coord.pos.y;\n      let tempCoord = boardCoordinates.findIndex(\n        (coord) => coord.pos.x === x && coord.pos.y === y\n      );\n      boardCoordinates[tempCoord].ship = newShip.type;\n      return coord;\n    });\n    return \"ship placed\";\n  };\n\n  const randomizeShip = () => {\n    //places all ships randomly on the board\n    const generateRandomShips = () => {\n      let randCoords;\n\n      randCoords = randomizeCoords(5);\n      placeShip(\"Carrier\", 5, randCoords);\n\n      randCoords = randomizeCoords(4);\n      placeShip(\"Battleship\", 4, randCoords);\n\n      randCoords = randomizeCoords(3);\n      placeShip(\"Submarine\", 3, randCoords);\n\n      randCoords = randomizeCoords(3);\n      placeShip(\"Destroyer\", 3, randCoords);\n\n      randCoords = randomizeCoords(2);\n      placeShip(\"Patrol\", 2, randCoords);\n    };\n\n    //generate random coords\n    const randomizeCoords = (length) => {\n      let baseArray, minIndex, maxIndex, baseRandIndex;\n      // let baseIndex = Math.floor(Math.random() * (10 - (length - 1)));\n      let randIndexArray = [];\n      let coords = [];\n      let increment = 0; //1 if horizontal, 10 if vertical\n      let shipsOccupied = 0; //should be 0 if there is no ship on selected coordinates\n      let adjacentOccupied = false; //should be 0 if there is no ship on adjacent sides of coords\n\n      const randomizeAxis = () => {\n        return Math.floor(Math.random() * 2) === 0 ? \"horizontal\" : \"vertical\";\n      };\n      let axis = randomizeAxis();\n\n      if (axis === \"horizontal\") {\n        increment = 1;\n        baseArray = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\n        minIndex = baseArray[Math.floor(Math.random() * 10)];\n        maxIndex = minIndex + (10 - length);\n        baseRandIndex = getRndInteger(minIndex, maxIndex + 1);\n      } else if (axis === \"vertical\") {\n        increment = 10;\n        baseArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n        minIndex = baseArray[Math.floor(Math.random() * 10)];\n        maxIndex = minIndex + 10 * length;\n        baseRandIndex = getRndInteger(minIndex, maxIndex + 1);\n        let tempVerticalIndex = [];\n        for (let i = minIndex; i <= maxIndex; i += 10) {\n          tempVerticalIndex.push(i);\n        }\n        baseRandIndex =\n          tempVerticalIndex[\n            Math.floor(Math.random() * tempVerticalIndex.length)\n          ];\n      }\n\n      //complete ship indexes\n      for (let i = 0; i < length; i++) {\n        randIndexArray.push(baseRandIndex);\n        if (isOccupied(baseRandIndex)) shipsOccupied++;\n        baseRandIndex += increment;\n      }\n\n      //check adjacent if occupied by ships\n      const checkAdjacent = () => {\n        if (axis === \"horizontal\") {\n          for (let i = 0; i < randIndexArray.length; i++) {\n            if (i === 0) {\n              //check up, down, left, upper left,lower left indexes for ships\n              if (\n                isOccupied(randIndexArray[i] - 10) ||\n                isOccupied(randIndexArray[i] + 10) ||\n                isOccupied(randIndexArray[i] - 1) ||\n                isOccupied(randIndexArray[i] - 11) ||\n                isOccupied(randIndexArray[i] + 9)\n              )\n                adjacentOccupied = true;\n            } else if (i === randIndexArray.length - 1) {\n              //check up, down, right, upper right,lower right indexes for ships\n              if (\n                isOccupied(randIndexArray[i] - 10) ||\n                isOccupied(randIndexArray[i] + 10) ||\n                isOccupied(randIndexArray[i] + 1) ||\n                isOccupied(randIndexArray[i] - 9) ||\n                isOccupied(randIndexArray[i] + 11)\n              )\n                adjacentOccupied = true;\n            } else {\n              isOccupied(randIndexArray[i] - 10);\n              isOccupied(randIndexArray[i] + 10);\n            }\n          }\n        } else if (axis === \"vertical\") {\n          for (let i = 0; i < randIndexArray; i++) {\n            if (i === 0) {\n              //check left, right, up, upper left, upper right indexes for ships\n              if (\n                isOccupied(randIndexArray[i] - 1) ||\n                isOccupied(randIndexArray[i] + 1) ||\n                isOccupied(randIndexArray[i] - 10) ||\n                isOccupied(randIndexArray[i] - 11) ||\n                isOccupied(randIndexArray[i] - 9)\n              )\n                adjacentOccupied = true;\n            } else if (i === randIndexArray.length - 1) {\n              //check left, right, down, lower left, lower right indexes for ships\n              if (\n                isOccupied(randIndexArray[i] - 1) ||\n                isOccupied(randIndexArray[i] + 1) ||\n                isOccupied(randIndexArray[i] + 10) ||\n                isOccupied(randIndexArray[i] + 9) ||\n                isOccupied(randIndexArray[i] + 11)\n              )\n                adjacentOccupied = true;\n            } else {\n              isOccupied(randIndexArray[i] - 1);\n              isOccupied(randIndexArray[i] + 1);\n            }\n          }\n        }\n      };\n\n      checkAdjacent();\n\n      //get coordinates from the chosen indexes\n      for (let i = 0; i < randIndexArray.length; i++) {\n        coords.push({\n          pos: boardCoordinates[randIndexArray[i]].pos,\n          isHit: false,\n        });\n      }\n\n      //returns a random integer between min-max(min inclusive)\n      function getRndInteger(min, max) {\n        return Math.floor(Math.random() * (max - min)) + min;\n      }\n\n      return shipsOccupied === 0 && adjacentOccupied === false\n        ? coords\n        : randomizeCoords(length);\n    };\n\n    //check if occupied\n    const isOccupied = (index) => {\n      if (typeof boardCoordinates[index] === \"undefined\") {\n        return false;\n      }\n\n      return boardCoordinates[index].ship ? true : false;\n    };\n\n    //generate random ships\n    generateRandomShips();\n  };\n\n  const receiveAttack = (targetX, targetY) => {\n    //takes a coordinate and determines whether or not the attack hit a ship. also records misses\n    //returns result if miss, hit or ship is sunk\n    let recordResult = \"\";\n    boardCoordinates.forEach((coord) => {\n      if (coord.pos.x === targetX && coord.pos.y === targetY) {\n        coord.isAttacked = true;\n        if (coord.ship === null) {\n          recordResult = coord.status = \"miss\";\n        } else {\n          recordResult = coord.status = \"hit\";\n          //find the ship's coordinate and update its isHit status to true then check if ship is sunk\n          ships.forEach((ship) => {\n            if (ship.type === coord.ship) {\n              ship.hit(targetX, targetY);\n              if (ship.isSunk()) recordResult = \"sunk\";\n            }\n          });\n        }\n      }\n    });\n\n    //update all sunk coordinates satus to 'sunk'\n    updateToSunk();\n    return recordResult;\n  };\n\n  const updateToSunk = () => {\n    //checks for all ships that are sunk and updates board coordinates that has the sunk ships\n    ships.map((ship) => {\n      if (ship.isSunk()) {\n        ship.coords.map((shipCoord) => {\n          let sunkCoord = boardCoordinates.findIndex(\n            (boardCoord) =>\n              boardCoord.pos.x === shipCoord.pos.x &&\n              boardCoord.pos.y === shipCoord.pos.y\n          );\n          boardCoordinates[sunkCoord].status = \"sunk\";\n        });\n      }\n    });\n  };\n\n  const reportShips = () => {\n    //this method should return true if all ships are sunk\n    let sunkShips = 0;\n    ships.map((ship) => {\n      if (ship.isSunk() === true) sunkShips++;\n      return ship;\n    });\n\n    return sunkShips === ships.length;\n  };\n\n  const resetBoard = () => {\n    //clears the board coordinates array and ships\n\n    //delete board\n    let boardLength = boardCoordinates.length;\n    for (let i = 0; i < boardLength; i++) {\n      boardCoordinates.pop();\n    }\n\n    //reset ships\n    let shipsLength = ships.length;\n    for (let i = 0; i < shipsLength; i++) {\n      ships.pop();\n    }\n\n    //set board to default\n    setBoardCoordinates();\n  };\n\n  const findBoardIndex = (x, y) => {\n    return boardCoordinates.findIndex(\n      (coord) => coord.pos.x === x && coord.pos.y === y\n    );\n  };\n\n  return {\n    ships,\n    boardCoordinates,\n    setBoardCoordinates,\n    placeShip,\n    receiveAttack,\n    reportShips,\n    updateToSunk,\n    resetBoard,\n    randomizeShip,\n    findBoardIndex,\n  };\n};\n\nexport default gameboardFactory;\n","import playerFactory from \"./data/player\";\nimport gameboardFactory from \"./data/gameboard\";\n\nconst game_controller = (function () {\n  let turn = \"player\"; //\"player\" or \"cpu\"\n  let Player = playerFactory(gameboardFactory());\n  let CPU = playerFactory(gameboardFactory());\n\n  function start() {\n    //initialize board of player/cpu\n    Player.board.setBoardCoordinates();\n    CPU.board.setBoardCoordinates();\n  }\n\n  function resetGame() {\n    //resets board of player and cpu\n    Player.board.resetBoard();\n    CPU.board.resetBoard();\n    CPU.resetAttacksRecord();\n    turn=\"player\";\n  }\n\n  function randomizeShips () {\n    //randomizes all 5 ships of CPU\n    CPU.board.randomizeShip();\n  }\n\n  return {\n    Player,\n    CPU,\n    turn,\n    start,\n    resetGame,\n    randomizeShips,\n  };\n})();\n\nexport default game_controller;\n","export default __webpack_public_path__ + \"static/media/splash2.19ae4f12.flac\";","export default __webpack_public_path__ + \"static/media/cannonshot 8bit.bc64263f.wav\";","export default __webpack_public_path__ + \"static/media/explode 8bit.9143f8a8.wav\";","export default __webpack_public_path__ + \"static/media/win.3a1474da.wav\";","export default __webpack_public_path__ + \"static/media/lose.af07075d.wav\";","export default __webpack_public_path__ + \"static/media/start game.35972233.ogg\";","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Start from \"./Start\";\nimport ShipPlacement from \"./ShipPlacement\";\nimport Game from \"./Game\";\nimport { Restart } from \"./Game\";\nimport Result from \"./Result\";\nimport game_controller from \"../game-controller\";\nimport miss from \"../sounds/splash2.flac\";\nimport hit from \"../sounds/cannonshot 8bit.wav\";\nimport sunk from \"../sounds/explode 8bit.wav\";\nimport win_sound from \"../sounds/win.wav\";\nimport lose_sound from \"../sounds/lose.wav\";\nimport start from \"../sounds/start game.ogg\";\n\nfunction App() {\n  const [turn, setTurn] = useState(game_controller.turn);\n  const [player, setPlayer] = useState(game_controller.Player);\n  const [CPU, setCPU] = useState(game_controller.CPU);\n  const [showStart, setShowStart] = useState(true);\n  const [showShipPlacement, setShowShipPlacement] = useState(false);\n  const [showGame, setShowGame] = useState(false);\n  const [showRestart, setShowRestart] = useState(false);\n  const [showResult, setShowResult] = useState(false);\n  const [winner, setWinner] = useState(\"none\");\n\n  const toggleStart = () => {\n    //closes the start screen and shows the game screen\n    setShowShipPlacement(!showShipPlacement);\n    setShowStart(!showStart);\n    game_controller.start();\n    playSound(\"start\");\n  };\n\n  const toggleRestart = () => {\n    //opens or closes the restart screen\n    setShowRestart(!showRestart);\n  };\n\n  const toggleTurn = () => {\n    //sets turn to either cpu or player to determine who will attack\n    if (turn === \"cpu\") setTurn(\"player\");\n    else setTurn(\"cpu\");\n  };\n\n  const toggleResult = () => {\n    //hide or show the winner/results screen\n    setShowResult(!showResult);\n  };\n\n  const handlePlaceShip = (type, length, coords) => {\n    //adds a ship on the player's board after drag and dropping from the ship selection screen\n    let tempPlayer = player;\n    tempPlayer.board.placeShip(type, parseInt(length), coords);\n    setPlayer({ ...tempPlayer });\n  };\n\n  const onResetShipPlacement = () => {\n    //reset ships\n    let tempPlayer = player;\n    tempPlayer.board.resetBoard();\n    setPlayer({ ...tempPlayer });\n  };\n\n  const onDoneShipPlacement = () => {\n    //closes ship placement screen and shows game screen\n    setShowShipPlacement(!showShipPlacement);\n    setShowGame(!showGame);\n    game_controller.randomizeShips();\n  };\n\n  const handlePlayerAttack = (targetX, targetY) => {\n    //takes a pair of coordinates and attacks cpu board\n    let tempPlayer = player;\n    let tempCPU = CPU;\n    let recordResult = tempPlayer.playerAttack(targetX, targetY, tempCPU);\n\n    setCPU({ ...tempCPU });\n    if (recordResult.result === \"miss\") toggleTurn();\n\n    //if all cpu ships are sunk show player win\n    if (tempCPU.board.reportShips()) {\n      setWinner(\"player\");\n      playSound(\"win\");\n      return toggleResult();\n    } else {\n      playSound(recordResult.result);\n    }\n  };\n\n  const handleCPUAttack = () => {\n    //cpu attacks player board\n    let tempPlayer = player;\n    let tempCPU = CPU;\n    let recordResult = tempCPU.aiAttackImproved(tempPlayer);\n\n    setTimeout(() => {\n      //if all player ships are sunk show cpu win\n      if (recordResult.result === \"miss\") toggleTurn();\n      setPlayer({ ...tempPlayer });\n      if (tempPlayer.board.reportShips()) {\n        toggleTurn();\n        setWinner(\"cpu\");\n        playSound(\"lose\");\n        return toggleResult();\n      } else {\n        playSound(recordResult.result);\n      }\n    }, 1500);\n  };\n\n  const handleRestartGame = () => {\n    //reset player boards\n    game_controller.resetGame();\n\n    //toggle start screen and game screen\n    setShowStart(!showStart);\n    setShowGame(!showGame);\n    if (showRestart) setShowRestart(!showRestart);\n    if (showResult) setShowResult(!showResult);\n  };\n\n  const playSound = (result) => {\n    let audio = document.createElement(\"audio\");\n    switch (result) {\n      case \"miss\":\n        audio.src = miss;\n        audio.volume = 0.2;\n        break;\n      case \"hit\":\n        audio.src = hit;\n        break;\n      case \"sunk\":\n        audio.src = sunk;\n        break;\n      case \"win\":\n        audio.src = win_sound;\n        break;\n      case \"lose\":\n        audio.src = lose_sound;\n        break;\n      case \"start\":\n        audio.src = start;\n        break;\n      default:\n    }\n    if (!audio) return;\n    audio.currentTime = 0;\n    audio.play();\n  };\n\n  return (\n    <div className=\"App\">\n      {showResult && (\n        <Result winner={winner} handleRestartGame={handleRestartGame} />\n      )}\n      {showShipPlacement && (\n        <ShipPlacement\n          player={player}\n          handlePlaceShip={handlePlaceShip}\n          onResetShipPlacement={onResetShipPlacement}\n          onDoneShipPlacement={onDoneShipPlacement}\n        />\n      )}\n      {showStart && <Start onToggleStart={toggleStart} />}\n      {showRestart && (\n        <Restart\n          onToggleRestart={toggleRestart}\n          handleRestartGame={handleRestartGame}\n        />\n      )}\n      {showGame && (\n        <Game\n          player={player}\n          CPU={CPU}\n          turn={turn}\n          onToggleRestart={toggleRestart}\n          handlePlayerAttack={handlePlayerAttack}\n          handleCPUAttack={handleCPUAttack}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}